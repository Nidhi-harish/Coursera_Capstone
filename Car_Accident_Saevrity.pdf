{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Capstone Project - Predicting Traffic Accident Severity\n",
    "### Applied DSc Capstone by IBM/Coursera"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Table of content\n",
    "1. [Introduction](#intro)\n",
    "2. [Data](#data)\n",
    "3. [Data Cleaning](#clean)\n",
    "4. [EDA](#eda)\n",
    "5. [Data Preparation](#prep)\n",
    "6. [Model Development](#modeling)\n",
    "5. [Results](#results)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Introduction <a id='intro'>\n",
    "Road traffic injuries are currently estimated to be the eighth leading cause of death across all age groups globally, and are predicted to become the seventh leading cause of death by 2030.\n",
    "    \n",
    "Analysing a significant range of factors, including weather conditions, special events, roadworks, traffic jams among others, an accurate prediction of the severity of the accidents can be performed.\n",
    "\n",
    "These insights, could allow law enforcement bodies to allocate their resources more effectively in advance of potential accidents, preventing when and where a severe accidents can occur as well as saving both, time and money. In addition, this knowledge of a severe accident situation can be warned to drivers so that they would drive more carefully or even change their route if it is possible or to hospital which could have set everything ready for a severe intervention in advance.\n",
    "\n",
    "Governments should be highly interested in accurate predictions of the severity of an accident, in order to reduce the time of arrival and thus save a significant amount of people each year. Others interested could be private companies investing in technologies aiming to improve road safeness."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Data <a id='data'>\n",
    "    \n",
    "The original data for this project comes from the following [Kaggle data set](https://www.kaggle.com/ahmedlahlou/accidents-in-france-from-2005-to-2016). In a previous notebook, [Feature Selection](http://localhost:8889/notebooks/Desktop/Coursera/Capstone/Feature%20Selection.ipynb), I performed a selection of the most relevant features for the prediction of traffic accident severity. \n",
    "\n",
    "The features of the dataset resulting are the following:\n",
    "\n",
    "In the *characteristics* dataset, I will keep the features: \"lighting\", \"localisation\"(agg), \"type of intersection\", \"atmospheric conditions\", \"type of collisions\", \"department\", \"adress\", \"time\" and the coordinates. I added two new features from this original dataset: \"date\" and \"weekend\" indicating if the accident occurred during the weekend or not.\n",
    "\n",
    "In the *places* dataset, I will keep only the features: \"road categorie\", \"traffic regime\", \"number of traffic lanes\", \"road profile\", \"road shape\", \"surface condition\", \"situation\", \"school nearby\" and \"infrastructure\".\n",
    "\n",
    "From the *users* dataset, I have created the following features: \n",
    "+ num_us: total number of users involved in the accident.\n",
    "+ ped: Wether there are pedestrians involved or not.\n",
    "+ critic_age: If there is any user in between 17 and 31 y.o.\n",
    "+ sev : maximum gravity suffered by any user involved in the accident:\n",
    "    + 0 = Unscathered or Light injury\n",
    "    + 1 = Hospitalized wonded or Death\n",
    "\n",
    "I used the *holiday* dataset to craft a new feature indicating the accident accurred during a holiday."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import datetime as dt\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Data Cleaning <a id='clean'>\n",
    "    \n",
    "Before starting to run any ML algorithm on the data, the data have to go through the preprocessing part. In this part, data will be cleaned so there is no missing or unusual value. The goal is that the data is the best possible before applying the algorithms."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Importing Data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>time</th>\n",
       "      <th>lum</th>\n",
       "      <th>agg</th>\n",
       "      <th>int</th>\n",
       "      <th>atm</th>\n",
       "      <th>col</th>\n",
       "      <th>lat</th>\n",
       "      <th>long</th>\n",
       "      <th>dep</th>\n",
       "      <th>...</th>\n",
       "      <th>situation</th>\n",
       "      <th>school</th>\n",
       "      <th>crit_age</th>\n",
       "      <th>ped</th>\n",
       "      <th>dead_age</th>\n",
       "      <th>num_us</th>\n",
       "      <th>sev</th>\n",
       "      <th>date</th>\n",
       "      <th>weekend</th>\n",
       "      <th>holiday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>201600000001</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>590</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2016-02-01</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>201600000002</td>\n",
       "      <td>18.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>590</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2016-03-16</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>201600000003</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>590</td>\n",
       "      <td>...</td>\n",
       "      <td>3.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2016-07-13</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>201600000004</td>\n",
       "      <td>19.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>590</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2016-08-15</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>201600000005</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>590</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2016-12-23</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>201600000006</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>590</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2016-12-23</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>201600000007</td>\n",
       "      <td>11.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>590</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-05-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>201600000008</td>\n",
       "      <td>19.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>590</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2016-05-14</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>201600000009</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>590</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2016-09-23</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>201600000010</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>9.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>590</td>\n",
       "      <td>...</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2016-12-30</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             ID  time  lum  agg  int  atm  col  lat long  dep  ...  situation  \\\n",
       "0  201600000001  14.0    1    2    1  8.0  3.0  0.0    0  590  ...        1.0   \n",
       "1  201600000002  18.0    1    2    6  1.0  6.0  0.0    0  590  ...        1.0   \n",
       "2  201600000003  19.0    1    1    1  1.0  6.0  0.0    0  590  ...        3.0   \n",
       "3  201600000004  19.0    2    2    1  7.0  3.0  0.0    0  590  ...        1.0   \n",
       "4  201600000005  11.0    1    2    3  1.0  3.0  0.0    0  590  ...        1.0   \n",
       "5  201600000006  11.0    1    2    1  7.0  6.0  0.0    0  590  ...        1.0   \n",
       "6  201600000007  11.0    1    2    1  7.0  2.0  0.0    0  590  ...        1.0   \n",
       "7  201600000008  19.0    2    1    1  1.0  1.0  0.0    0  590  ...        1.0   \n",
       "8  201600000009  19.0    1    2    1  1.0  3.0  0.0    0  590  ...        1.0   \n",
       "9  201600000010  10.0    1    1    1  9.0  6.0  0.0    0  590  ...        1.0   \n",
       "\n",
       "  school  crit_age  ped  dead_age  num_us  sev        date  weekend  holiday  \n",
       "0    0.0         0    0         0       2    1  2016-02-01        0      0.0  \n",
       "1    0.0         0    0         0       3    1  2016-03-16        0      0.0  \n",
       "2   99.0         1    1         0       2    1  2016-07-13        0      0.0  \n",
       "3   99.0         1    0         0       3    1  2016-08-15        0      1.0  \n",
       "4    3.0         0    0         0       3    1  2016-12-23        0      0.0  \n",
       "5   99.0         0    1         0       2    1  2016-12-23        0      0.0  \n",
       "6   99.0         0    0         0       3    0  2016-05-01        1      1.0  \n",
       "7    0.0         0    0         0       3    1  2016-05-14        1      0.0  \n",
       "8   99.0         0    0         0       2    1  2016-09-23        0      0.0  \n",
       "9    0.0         0    1         0       2    1  2016-12-30        0      0.0  \n",
       "\n",
       "[10 rows x 29 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('Data.csv', index_col=0)\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 839985 entries, 0 to 839984\n",
      "Data columns (total 29 columns):\n",
      "ID           839985 non-null int64\n",
      "time         839985 non-null float64\n",
      "lum          839985 non-null int64\n",
      "agg          839985 non-null int64\n",
      "int          839985 non-null int64\n",
      "atm          839930 non-null float64\n",
      "col          839974 non-null float64\n",
      "lat          362471 non-null float64\n",
      "long         362467 non-null object\n",
      "dep          839985 non-null int64\n",
      "road_cat     839984 non-null float64\n",
      "road_num     780914 non-null object\n",
      "traf_reg     839187 non-null float64\n",
      "num_lanes    838195 non-null float64\n",
      "res_lane     838345 non-null float64\n",
      "long_prof    838924 non-null float64\n",
      "shape        838909 non-null float64\n",
      "surf         838968 non-null float64\n",
      "infra        838707 non-null float64\n",
      "situation    838983 non-null float64\n",
      "school       838709 non-null float64\n",
      "crit_age     839985 non-null int64\n",
      "ped          839985 non-null int64\n",
      "dead_age     839985 non-null int64\n",
      "num_us       839985 non-null int64\n",
      "sev          839985 non-null int64\n",
      "date         839985 non-null object\n",
      "weekend      839985 non-null int64\n",
      "holiday      839985 non-null float64\n",
      "dtypes: float64(15), int64(11), object(3)\n",
      "memory usage: 192.3+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count     780914.0\n",
       "unique      2088.0\n",
       "top            0.0\n",
       "freq      439016.0\n",
       "Name: road_num, dtype: float64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['road_num'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the summary of the data we see that the data types are coherent with their respective values, with the only exception of the date, and that some features have missing values. \n",
    "\n",
    "+ More than half of the values for the coordenates are missig, as well as roughly a 10% of the data regarding the road_num and more than a 50% of the remaining samples are a 0. Thus, to keep the amount of samples the mentioned features will be dropped. \n",
    "\n",
    "+ Few values are missing in some features such as the atmospheric conditions or road category.\n",
    "\n",
    "\n",
    "Missing values and outliers will be filled with the label for *Other cases* category if possible. If not the most frequent value of the feature will be applyed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(['lat', 'long', 'road_num'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values in atm: 55 \n",
      "Missing values in collision: 11 \n",
      "Missing values in road_cat: 1 \n",
      "Missing values in surf: 1017\n"
     ]
    }
   ],
   "source": [
    "print('Missing values in atm:', df[\"atm\"].isna().sum(),'\\n'\n",
    "    'Missing values in collision:', df[\"col\"].isna().sum(), '\\n'\n",
    "    'Missing values in road_cat:', df[\"road_cat\"].isna().sum(),'\\n'\n",
    "    'Missing values in surf:', df[\"surf\"].isna().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x24f41266448>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['atm'].hist(alpha=0.5, rwidth=0.35, align='mid', figsize=(12,6), label='atm')\n",
    "df['col'].hist(alpha=0.5, rwidth=0.35, align='mid', label='collision')\n",
    "df['road_cat'].hist(alpha=0.6, rwidth=0.35, align='left', label='road_cat')\n",
    "df['surf'].hist(alpha=0.3,rwidth=0.35, align='left', label='surf')\n",
    "plt.title('Frequency of the values in 4 different features', size=12)\n",
    "plt.xticks(range(10))\n",
    "plt.xlabel('Value')\n",
    "plt.ylabel('Frequency')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The 0 value in the surface is the only outlier. The minimum number for all features is 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0    652322\n",
       "2.0    143254\n",
       "9.0     32498\n",
       "7.0      5474\n",
       "5.0      2643\n",
